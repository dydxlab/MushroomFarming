{"version":3,"sources":["app/hooks.ts","features/farming_minigame/farmingSlice.ts","features/farming_minigame/Farming.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/farming_minigame/Farming.module.css"],"names":["useAppSelector","useSelector","activeCellStatuses","threeByThreeGrid","gridLength","choiceCount","coordChoices","grid","gridChoices","choose","Array","length","keys","allParams","3","4","5","initialState","initializeGrid","status","score","maxScore","maxScoreCoords","enabled","achievementStats","perfectScores","streak","achievements","title","description","complete","freshAchievements","version","getRandomIntInclusive","min","max","Math","ceil","floor","random","gridParams","showGolden","n","lookup","1","2","map","i","j","arr","k","prefix","flatMap","v","slice","calculateScore","baseScores","base","activateGridCoords","coords","cellStatus","activateCellStatus","deactivateGridCellStatus","highlightCellStatus","cell","farmingSlice","createSlice","name","reducers","activateCell","state","action","payload","x","filter","includes","y","concat","current","coord","setGridSize","randomGrid","emptyGrid","JSON","parse","stringify","startGrid","bruteForceSolution","gridCopy1","curr","choices","maxCoord","choice","gridCopy","coords1","push","bruteForce","enableButtons","actions","selectGrid","farming","selectGridSize","selectStatus","selectScore","selectMaxScore","selectStreak","selectWins","selectFreshAchievements","Farming","gridSize","streaks","wins","dispatch","useDispatch","activateCellAudio","Audio","volume","deactivateCellAudio","perfectScoreAudio","achievementAudio","finishRoundAudio","getButtonStyleCellStatus","cellValue","enabledButtons","styles","button","greenActive","greenInactive","redActive","redInactive","blueActive","blueInactive","goldActive","goldInactive","orangeInactive","orangeActive","optimal","runLoop","setTimeout","mbg","document","getElementById","play","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","transition","Slide","style","className","gameText","row","color","onClick","disabled","getBoard","type","value","checked","onChange","a","toast","success","progress","undefined","toastId","App","id","options","fullScreen","enable","zIndex","background","opacity","fpsLimit","interactivity","detectsOn","modes","bubble","distance","duration","size","particles","collisions","move","direction","outMode","speed","straight","number","density","value_area","shape","rotate","animation","opacityRate","sizeRate","detectRetina","backgroundColor","xmlns","height","width","fill","viewBox","d","attributeName","attributeType","values","additive","repeatCount","dur","persistedState","localStorage","getItem","gameState","store","configureStore","reducer","farmingReducer","preloadedState","subscribe","setItem","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d874d383.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, current } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nconst currentVersion = '0.3'\n\ninterface GridParams {\n  gridLength: number;\n  coordChoices: Array<Array<number>>;\n  choiceCount: number;\n  grid: Array<Array<CellStatus>>;\n  gridChoices: Array<Array<number>>;\n}\n\ninterface AchievementStats {\n  perfectScores: number;\n  streak: number;\n}\n\ninterface Achievement {\n  perfectScores?: number;\n  streak?: number;\n  title: string;\n  description: string;\n  complete: boolean;\n}\nexport type CellStatus = 'GreenActive' | 'BlueActive' | 'RedActive' | 'OrangeActive' | 'GreenInactive' | 'BlueInactive' | 'RedInactive' | 'OrangeInactive' |\n  'GreenActiveHighlighted' | 'BlueActiveHighlighted' | 'RedActiveHighlighted' | 'OrangeActiveHighlighted' | 'GreenInactiveHighlighted' | 'BlueInactiveHighlighted' | 'RedInactiveHighlighted' | 'OrangeInactiveHighlighted' |\n  'Neutral' | 'GoldInactive' | 'GoldInactiveHighlighted' | 'GoldActive' | 'GoldActiveHighlighted'\nexport const activeCellStatuses: Array<CellStatus> = ['GreenActive', 'BlueActive', 'RedActive', 'OrangeActive', 'GoldActive']\n\nlet fiveStreak: Achievement = { streak: 5, title: \"Five Win Streak\", description: \"Unprecedented success!\", complete: false}\nlet tenStreak: Achievement = { streak: 10, title: \"Ten Win Streak\", description: \"Unprecedented success!\", complete: false }\nlet fiftyStreak: Achievement = { streak: 10, title: \"Fifty Win Streak\", description: \"Unprecedented success!\", complete: false }\nlet hundredStreak: Achievement = { streak: 10, title: \"One Hundred Win Streak! Unbelievable\", description: \"Unprecedented success!\", complete: false }\nlet tenTotal: Achievement = { perfectScores: 10, title: \"Ten Wins!\", description: \"Unprecedented success!\", complete: false }\nlet mushroomUnlock: Achievement = { perfectScores: 30, title: \"Golden And Orange Mushrooms Unlocked\", description: \"Unprecedented success!\", complete: false }\nlet fiftyTotal: Achievement = { perfectScores: 50, title: \"Fifty Wins!\", description: \"Unprecedented success!\", complete: false }\nlet hundredTotal: Achievement = { perfectScores: 100, title: \"One Hundred Wins!\", description: \"Unprecedented success!\", complete: false }\n\nexport interface FarmingState {\n  grid: GridParams;\n  status: 'idle' | 'starting' | 'started' | 'finished' | 'options';\n  score: number;\n  maxScore: number;\n  maxScoreCoords: Array<Array<number>>;\n  enabled: boolean;\n  achievementStats: AchievementStats;\n  achievements: Array<Achievement>;\n  freshAchievements: Array<Achievement>;\n  version: string;\n}\n\n\n\nlet threeByThreeGrid: GridParams = {\n  gridLength: 3,\n  choiceCount: 3,\n  coordChoices: [[0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [1, 1], [2, 1], [1, 2], [2, 2]],\n  grid: [['Neutral']],\n  gridChoices: choose([...Array([[0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [1, 1], [2, 1], [1, 2], [2, 2]].length).keys()], 3)\n}\nlet fourByFourGrid: GridParams = {\n  gridLength: 4,\n  choiceCount: 4,\n  coordChoices: [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3],],\n  grid: [['Neutral']],\n  gridChoices: choose([...Array([[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3],].length).keys()], 4)\n}\nlet fiveByFiveGrid: GridParams = {\n  gridLength: 5,\n  choiceCount: 5,\n  coordChoices: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [1, 4], [2, 4], [3, 4], [4, 3], [4, 4],],\n  grid: [['Neutral']],\n  gridChoices: choose([...Array([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [1, 4], [2, 4], [3, 4], [4, 3], [4, 4],].length).keys()], 5)\n}\n\nlet allParams = {\n  3: threeByThreeGrid,\n  4: fourByFourGrid,\n  5: fiveByFiveGrid\n}\n\nconst initialState: FarmingState = {\n  //grid: [[0, 0], [1, 0]],\n  grid: initializeGrid(threeByThreeGrid, false),\n  status: 'idle',\n  score: 0,\n  maxScore: 20,\n  maxScoreCoords: [[0]],\n  enabled: false,\n  achievementStats: { perfectScores: 0, streak: 0 },\n  achievements: [fiveStreak, tenStreak, fiftyStreak, hundredStreak, tenTotal, mushroomUnlock, fiftyTotal, hundredTotal],\n  freshAchievements: new Array<Achievement>(),\n  \n  version: '0.1'\n};\n\nfunction getRandomIntInclusive(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nfunction emptyGrid(gridParams: GridParams): GridParams {\n  let n = gridParams.gridLength\n  let randomGrid: Array<Array<CellStatus>> = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => 'Neutral'))\n  gridParams.grid = randomGrid\n  return gridParams\n}\n\nfunction initializeGrid(gridParams: GridParams, showGolden: boolean): GridParams {\n  let n = gridParams.gridLength\n  let lookup = {1: 'GreenInactive', 2: 'BlueInactive', 3:'RedInactive'}\n  gridParams.grid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => lookup[getRandomIntInclusive(1, 3)]))\n  if(showGolden && Math.random() >0.98) {\n    gridParams.grid[getRandomIntInclusive(0, gridParams.gridLength - 1)][getRandomIntInclusive(0, gridParams.gridLength - 1)] = 'GoldInactive'\n  } else if(showGolden && Math.random() >0.85) {\n    gridParams.grid[getRandomIntInclusive(0, gridParams.gridLength - 1)][getRandomIntInclusive(0, gridParams.gridLength - 1)] = 'OrangeInactive'\n  }\n  return gridParams\n}\nexport interface BruteforceSolution {\n  coords: Array<Array<number>>;\n  maxScore: number;\n}\n\n\nfunction choose(arr, k, prefix: Array<number> = []) {\n  if (k == 0) return [prefix];\n  return arr.flatMap((v, i) =>\n    choose(arr.slice(i + 1), k - 1, [...prefix, v])\n  );\n}\n\n\n\nfunction bruteForce(grid: GridParams): BruteforceSolution {\n  //let coordChoices = {1: [0,0], 2: [0,1], 3: [0,2], 4: [1,0], 5:[2,0], 6:[1,1], 7:[2,1],8:[1,2], 9:[2,2]}\n  let coordChoices = grid.coordChoices\n  let gridCopy1 = deactivateGridCellStatus(JSON.parse(JSON.stringify(grid.grid)))\n  let curr: Array<BruteforceSolution> = []\n  let choices = grid.gridChoices\n  let maxCoord = [[0]]\n  let maxScore = 0\n  for (const choice of choices) {\n    let gridCopy = deactivateGridCellStatus(gridCopy1)\n    choice.flatMap(x => activateGridCoords(gridCopy, coordChoices[x]))\n    let score = calculateScore(gridCopy)\n    let coords1 = choice.map(x => coordChoices[x])\n    curr.push({ coords: coords1, maxScore: score })\n    if (score > maxScore) {\n      maxCoord = coords1\n      maxScore = score\n    }\n  }\n\n  return { coords: maxCoord, maxScore: maxScore }\n}\n\nfunction calculateScore(grid: Array<Array<CellStatus>>) {\n  let score = 0;\n  let baseScores = { 'GreenActive': 4, 'BlueActive': 0, 'RedActive': 2, 'GoldActive': 10, 'OrangeActive': 1 }\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      let base = baseScores[grid[i][j]] ?? -1\n      if (base === -1) {\n        continue;\n      }\n      if(i + 1 < grid.length && grid[i + 1][j] === 'BlueActive'){\n        base = base + 3\n      }\n      if (i - 1 >= 0 && grid[i - 1][j] === 'BlueActive'){\n        base = base + 3\n      }\n      if (i - 1 >= 0 && j - 1 >= 0 && grid[i - 1][j - 1] === 'RedActive'){\n        base = base + 1\n      }\n      if (i - 1 >= 0 && j + 1 <= grid[0].length && grid[i - 1][j + 1] === 'RedActive'){\n        base = base + 1\n      }\n      if (i + 1 < grid.length && j - 1 >= 0 && grid[i + 1][j - 1] === 'RedActive'){\n        base = base + 1\n      }\n      if (i + 1 < grid.length && j + 1 < grid[0].length && grid[i + 1][j + 1] === 'RedActive'){\n        base = base + 1\n      }\n      if (j - 1 >= 0 && grid[i][j - 1] === 'OrangeActive'){\n        base = base * 2\n      }\n      \n      if ((j - 1 >= 0 && grid[i][j - 1] === 'GreenActive') || (j + 1 < grid[0].length && grid[i][j + 1] === 'GreenActive')) {\n        base = 0\n      }\n      score = score + base\n    }\n  }\n\n  return score;\n}\n\nfunction activateGridCoords(grid, coords) {\n  grid[coords[0]][coords[1]] = activateCellStatus(grid[coords[0]][coords[1]])\n  return grid\n}\n\nfunction activateCellStatus(cellStatus: CellStatus) {\n  switch (cellStatus) {\n    case 'GreenActive': return 'GreenInactive'\n    case 'GreenInactive': return 'GreenActive'\n    case 'RedActive': return 'RedInactive'\n    case 'RedInactive': return 'RedActive'\n    case 'BlueActive': return 'BlueInactive'\n    case 'BlueInactive': return 'BlueActive'\n    case 'GoldActive': return 'GoldInactive'\n    case 'GoldInactive': return 'GoldActive'\n    case 'OrangeActive': return 'OrangeInactive'\n    case 'OrangeInactive': return 'OrangeActive'\n  }\n\n}\n\nfunction deactivateGrid(grid) {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      switch (grid[i][j]) {\n        case '4': grid[i][j] = 1; break;\n        case 5: grid[i][j] = 2; break;\n        case 6: grid[i][j] = 3; break;\n        default: break;\n      }\n    }\n  }\n\n  return grid\n}\n\nfunction deactivateGridCellStatus(grid) {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      switch (grid[i][j]) {\n        case 'GreenActive': grid[i][j] = 'GreenInactive'; break;\n        case 'RedActive': grid[i][j] = 'RedInactive'; break;\n        case 'BlueActive': grid[i][j] = 'BlueInactive'; break;\n        case 'GoldActive': grid[i][j] = 'GoldInactive'; break;\n        case 'OrangeActive': grid[i][j] = 'OrangeInactive'; break;\n        default: break;\n      }\n    }\n  }\n\n  return grid\n}\n\nfunction highlightCellStatus(cell: CellStatus): CellStatus {\n  switch (cell) {\n    case 'GreenActive': return 'GreenActiveHighlighted';\n    case 'RedActive': return 'RedActiveHighlighted'; \n    case 'BlueActive': return 'BlueActiveHighlighted';\n    case 'GoldActive': return 'GoldActiveHighlighted';  \n    case 'OrangeActive': return 'OrangeActiveHighlighted';  \n    case 'GreenInactive': return 'GreenInactiveHighlighted'; \n    case 'RedInactive': return 'RedInactiveHighlighted'; \n    case 'BlueInactive': return 'BlueInactiveHighlighted'; \n    case 'GoldInactive': return 'GoldInactiveHighlighted'; \n    case 'OrangeInactive': return 'OrangeInactiveHighlighted'; \n    default: return 'Neutral'\n  }\n\n}\n\nexport const farmingSlice = createSlice({\n  name: 'farming',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n    activateCell: (state, action) => {\n      state.freshAchievements = []\n      let coords = action.payload;\n      //let coords = [0,2]\n      state.grid.grid = activateGridCoords(state.grid.grid, coords)\n      state.score = calculateScore(state.grid.grid)\n      if (state.grid.grid.flatMap(x => x).filter(x => activeCellStatuses.includes(x)).length === state.grid.choiceCount) {\n        state.status = 'finished'\n        if (state.score === state.maxScore) {\n          state.grid.grid = state.grid.grid.map(x => x.map(y => activeCellStatuses.includes(y) ? highlightCellStatus(y) : y))\n          state.achievementStats.perfectScores += 1\n          state.achievementStats.streak += 1\n          state.freshAchievements = state.freshAchievements.concat(state.achievements.filter(x => !x.complete && x.perfectScores === state.achievementStats.perfectScores))\n          state.freshAchievements = state.freshAchievements.concat(state.achievements.filter(x => !x.complete && x.perfectScores === state.achievementStats.perfectScores))\n          state.freshAchievements = state.freshAchievements.concat(state.achievements.filter(x => !x.complete && x.streak === state.achievementStats.streak))\n          state.achievements.filter(x => !x.complete && x.streak === state.achievementStats.streak).flatMap(x => x.complete = true)\n          state.achievements.filter(x => !x.complete && x.perfectScores === state.achievementStats.perfectScores).flatMap(x => x.complete = true)\n          \n        } else {\n          for (const coord of current(state.maxScoreCoords)) {\n            state.grid.grid[coord[0]][coord[1]] = highlightCellStatus(state.grid.grid[coord[0]][coord[1]])\n          }\n          state.achievementStats.streak = 0\n        }\n\n\n      }\n      //state.value += 1;\n    },\n    setGridSize: (state, action) => {\n      state.grid = emptyGrid(JSON.parse(JSON.stringify(allParams[action.payload])))\n    },\n    startGrid: (state) => {\n      state.status = 'starting'\n      state.grid = initializeGrid(state.grid,state.achievementStats.perfectScores > 30)\n      let bruteForceSolution = bruteForce(state.grid)\n      state.maxScore = bruteForceSolution.maxScore\n      state.maxScoreCoords = bruteForceSolution.coords\n      state.score = 0\n    },\n    enableButtons: (state) => {\n      state.status = 'started'\n    },\n  },\n});\n\nexport const { startGrid, activateCell, enableButtons, setGridSize } = farmingSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectGrid = (state: RootState) => state.farming.grid.grid;\nexport const selectGridSize = (state: RootState) => state.farming.grid.gridLength;\nexport const selectStatus = (state: RootState) => state.farming.status;\nexport const selectScore = (state: RootState) => state.farming.score;\nexport const selectMaxScore = (state: RootState) => state.farming.maxScore;\nexport const selectStreak = (state: RootState) => state.farming.achievementStats.streak;\nexport const selectWins = (state: RootState) => state.farming.achievementStats.perfectScores;\nexport const selectFreshAchievements = (state: RootState) => state.farming.freshAchievements;\n\n\nexport default farmingSlice.reducer;\n","\n\nimport React, { useState, FunctionComponent } from 'react';\nimport ReactDOM from 'react-dom'\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  selectGrid,\n  selectGridSize,\n  selectWins,\n  selectStreak,\n  setGridSize,\n  activateCell,\n  enableButtons,\n  selectStatus,\n  startGrid,\n  selectScore,\n  selectMaxScore,\n  activeCellStatuses,\n  CellStatus,\n  selectFreshAchievements\n} from './farmingSlice';\nimport styles from './Farming.module.css';\nimport { ToastContainer, toast, Slide } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\ninterface FarmingProps {\n  id: string;\n}\n\nexport const Farming: FunctionComponent = () => {\n  const grid = useAppSelector(selectGrid);\n  const gridSize = useAppSelector(selectGridSize);\n  const score = useAppSelector(selectScore);\n  const maxScore = useAppSelector(selectMaxScore);\n  const status = useAppSelector(selectStatus);\n  const streaks = useAppSelector(selectStreak);\n  const wins = useAppSelector(selectWins);\n  const freshAchievements = useAppSelector(selectFreshAchievements);\n\n  const dispatch = useAppDispatch();\n\n\n  const activateCellAudio = new Audio(\"./activate_cell.wav\")\n  activateCellAudio.volume = 0.3\n\n\n  const deactivateCellAudio = new Audio(\"./deactivate_cell.wav\")\n  deactivateCellAudio.volume = 0.3\n\n  const perfectScoreAudio = new Audio(\"./perfect_score.wav\")\n  const achievementAudio = new Audio(\"./achievement_unlocked.wav\")\n  achievementAudio.volume = 0.05\n  const finishRoundAudio = new Audio(\"./finish_round.wav\")\n\n\n\n\n\n  function getButtonStyleCellStatus(cellValue: CellStatus, enabledButtons) {\n    if (status === 'idle') {\n      return styles.button;\n    }\n\n    switch (cellValue) {\n      case 'GreenActive': return styles.greenActive;\n      case 'GreenInactive': return styles.greenInactive;\n      case 'RedActive': return styles.redActive;\n      case 'RedInactive': return styles.redInactive;\n      case 'BlueActive': return styles.blueActive;\n      case 'BlueInactive': return styles.blueInactive;\n      case 'GoldActive': return styles.goldActive;\n      case 'GoldInactive': return styles.goldInactive;\n      case 'OrangeInactive': return styles.orangeInactive;\n      case 'OrangeActive': return styles.orangeActive;\n\n\n      case 'GreenActiveHighlighted': return styles.greenActive + ' ' + styles.optimal;\n      case 'GreenInactiveHighlighted': return styles.greenInactive + ' ' + styles.optimal;\n      case 'RedActiveHighlighted': return styles.redActive + ' ' + styles.optimal;\n      case 'RedInactiveHighlighted': return styles.redInactive + ' ' + styles.optimal;\n      case 'BlueActiveHighlighted': return styles.blueActive + ' ' + styles.optimal;\n      case 'BlueInactiveHighlighted': return styles.blueInactive + ' ' + styles.optimal;\n      case 'GoldActiveHighlighted': return styles.goldActive + ' ' + styles.optimal;\n      case 'GoldInactiveHighlighted': return styles.goldInactive + ' ' + styles.optimal;\n      case 'OrangeActiveHighlighted': return styles.orangeActive + ' ' + styles.optimal;\n      case 'OrangeInactiveHighlighted': return styles.orangeInactive + ' ' + styles.optimal;\n\n      case 'Neutral': return styles.button;\n      default: return styles.button;\n\n    }\n  }\n\n  function runLoop() {\n    setTimeout(() => dispatch(startGrid()), 100);\n    setTimeout(() => dispatch(enableButtons()), 100);\n    let mbg = document.getElementById('mushbg');\n    if (mbg) {\n      (mbg as HTMLAudioElement).volume = 0.1\n    }\n    if (mbg) {\n      (mbg as HTMLAudioElement).play()\n    }\n\n\n  }\n\n\n  function clickCell(coord) {\n    if (activeCellStatuses.includes(grid[coord[0]][coord[1]])) {\n      deactivateCellAudio.play();\n    } else {\n      activateCellAudio.play();\n    }\n\n    dispatch(activateCell(coord))\n  }\n\n  function notify() {\n    if (freshAchievements && freshAchievements.length) {\n      freshAchievements.flatMap(a =>\n        toast.success(a.title, {\n          position: \"top-center\",\n          autoClose: 7000,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          toastId: a.title\n        })\n      )\n    }\n  }\n\n  function playEndRoundAudio() {\n    if (score === maxScore && freshAchievements.length) {\n      achievementAudio.play()\n    } else if (score === maxScore && !freshAchievements.length) {\n      perfectScoreAudio.play()\n    } else if (score !== maxScore) {\n      finishRoundAudio.play()\n    }\n\n  }\n\n\n  function getBoard() {\n    switch (status) {\n      case 'idle': return (<div>\n        <div className={styles.row}>\n          <button className={styles.button}\n            style={{ 'backgroundColor': 'goldenrod', color: 'white' }}\n            onClick={runLoop\n            }\n\n          >Start</button>\n        </div>\n        {grid && grid.map((row, i) => {\n          return (<div className={styles.row}>\n            {row.map((cell, j) =>\n            (<button disabled={true} className={getButtonStyleCellStatus(cell, status)}\n\n\n            >O</button>)\n            )\n            }\n\n          </div>\n          )\n        })}\n\n\n\n      </div>);\n      case 'starting':\n      case 'started':\n      case 'finished': return (\n        <div>\n\n          {grid && grid.map((row, i) => {\n            return (<div className={styles.row}>\n              {row.map((cell, j) =>\n              (<button disabled={status === 'finished'} className={getButtonStyleCellStatus(cell, status)}\n                onClick={() => clickCell([i, j])}\n\n              >O</button>)\n              )\n              }\n\n            </div>\n            )\n          })}\n\n\n\n        </div>\n      )\n\n    }\n  }\n\n  function finished() {\n    return (\n      <div>\n        {status === 'finished' && (<div>\n          <span style={{ 'color': 'rgb(255, 255, 255)' }} className={styles.gameText}>Your Score: {score}</span><br />\n          <span style={{ 'color': 'rgb(255, 255, 255)' }} className={styles.gameText}>Max Possible Score:{maxScore}</span>\n\n          \n          <div className={styles.row}>\n            <label style={{ 'color': 'rgb(255, 255, 255)', 'paddingRight': '12px' }}>\n              <input type=\"radio\" name=\"gridsize3x3\"\n                value={3}\n                checked={gridSize === 3}\n                onChange={() => dispatch(setGridSize(3))} /> 3X3</label>\n            <label style={{ 'color': 'rgb(255, 255, 255)', 'paddingRight': '12px' }}>\n              <input type=\"radio\" name=\"gridsize4x4\"\n                value={4}\n                checked={gridSize === 4}\n                onChange={() => dispatch(setGridSize(4))} />4X4</label>\n\n            <label style={{ 'color': 'rgb(255, 255, 255)', 'paddingRight': '12px' }}>\n              <input type=\"radio\" name=\"gridsize5x5\"\n                value={5}\n                checked={gridSize === 5}\n                onChange={() => dispatch(setGridSize(5))} />5X5</label>\n             <button className={styles.button}\n              style={{ 'backgroundColor': 'goldenrod', color: 'white' }}\n              onClick={runLoop\n              }\n\n            >Start</button>\n          </div>\n        </div>)\n        }\n        {status === 'finished' && notify()}\n      </div>\n    )\n  }\n\n  { status === 'finished' && score > 0 && playEndRoundAudio() }\n  return (\n    <div>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        transition={Slide}\n      />\n      <h3 style={{ 'color': 'rgb(255, 255, 255)' }}>Mushroom Farming</h3>\n      \n      <span style={{ 'color': 'rgb(192, 192, 192)' }} className={styles.gameText}>Red mushrooms give 2 points and add 1 points to active diagonal mushrooms</span><br />\n      <span style={{ 'color': 'rgb(192, 192, 192)' }} className={styles.gameText}>Green mushrooms give 4 points and set active mushrooms to the left and right to 0 points</span><br />\n      <span style={{ 'color': 'rgb(192, 192, 192)' }} className={styles.gameText}>Blue mushrooms give 0 points and add 3 points to active mushrooms above and below them</span><br />\n      <br />\n      <span style={{ 'color': 'rgb(255, 255, 255)' }} className={styles.gameText}><b>Streak: {streaks} Wins: {wins}</b></span><br />\n\n      {getBoard()}\n      \n      {status === 'started' && <div><span style={{ 'color': 'rgb(255, 255, 255)' }} className={styles.gameText}>Your Score: {score}</span>\n          <br /></div>}\n      {finished()}\n    </div>\n  );\n}\n\n//{status === 'started' && <img src='./timeout_bar.svg' className=\"App-logo\" alt=\"logo\" />}","import React from 'react';\nimport logo from './Beetle.png';\nimport { Farming } from './features/farming_minigame/Farming'\nimport { selectStatus } from './features/farming_minigame/farmingSlice'\nimport { useAppSelector, useAppDispatch } from './app/hooks';\nimport './App.css';\nimport Particles from \"react-tsparticles\";\nimport { getByDisplayValue } from '@testing-library/dom';\n\n\n\nfunction App() {\n  const status = useAppSelector(selectStatus);\n\n  \n  return (\n    <div className=\"App\">\n      \n      <Particles\n      id=\"tsparticles\"\n      options={{\n        fullScreen: {\n          enable: true,\n          zIndex: 0\n        },\n        background: {\n          color: {\n            value: \"rgb(147,70,17)\",\n          },\n          \n          opacity: 0.01\n        },\n        fpsLimit: 60,\n        interactivity: {\n          detectsOn: \"canvas\",\n          modes: {\n            bubble: {\n              distance: 400,\n              duration: 2,\n              opacity: 0.2,\n              size: 10,\n            }, \n          },\n        },\n        particles: {\n          color: {\n            value: [\n              \"#921212\",\n              \"#9e1b3e\",\n              \"#c3711a\",\n              \"#ff6b00\"\n            ]\n\n          },\n        \n          collisions: {\n            enable: false,\n          },\n          move: {\n            direction: \"none\",\n            enable: true,\n            outMode: \"out\",\n            random: true,\n            speed: 4,\n            straight: false,\n          },\n          number: {\n            density: {\n              enable: true,\n              value_area: 800,\n            },\n            value: 8,\n          },\n          opacity: {\n            value: 0.5,\n          },\n          shape: {\n            type: [\"polygon\", \"circle\"],\n          },\n          size: {\n            random: true,\n            value: 5,\n          },\n          rotate: {\n            direction: \"clockwise\",\n            animation: {\n              enable: true,\n              speed: 8\n            }\n          },\n          zIndex: {\n            opacityRate: 0.2,\n            sizeRate: 0.5\n          }\n        },\n        detectRetina: true,\n      }}\n      \n      >\n        </Particles>\n      <header className=\"App-header\" >\n      \n        \n        <div style={{zIndex: 1, backgroundColor: 'rgba(85, 85, 85, 0.3)'}}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"150px\" width=\"150px\" fill=\"#b2b2b2\" viewBox=\"0 0 64 64\" x=\"0px\" y=\"0px\">\n          <path d=\"M19.631,36.864A1,1,0,0,0,20.369,35c-.06-.023-.117-.05-.177-.074L21.9,24.688c.363.027.721.053,1.088.083-.13,10.067-2.308,23.656-3.627,31A7,7,0,0,0,26.252,64H39.238a6.994,6.994,0,0,0,6.935-7.953c-.378-2.729-1.417-9.59-3.2-17.076,4.679-.153,17.295-1.063,20.864-6.416a1,1,0,0,0,.155-.714C63.936,31.522,58.521,0,30,0,1.376,0,.012,22.725,0,22.955a1,1,0,0,0,.26.718A57.524,57.524,0,0,0,19.631,36.864ZM16.6,24.341l-2.129,7.808c-1.055-.6-2.058-1.215-3.006-1.837L14.5,24.236C15.181,24.267,15.881,24.3,16.6,24.341Zm-6.8,4.836q-1.236-.874-2.3-1.713l2.043-3.406c.876.023,1.8.051,2.779.087ZM5.914,26.2c-1.009-.843-1.851-1.6-2.511-2.222,1,0,2.288,0,3.826.031ZM18.3,34.115c-.692-.316-1.365-.647-2.025-.987l2.363-8.668c.412.025.838.056,1.258.084ZM34.878,24.046c-3.389-.462-6.71-.824-9.872-1.1a5,5,0,1,1,9.872,1.1Zm8.135,36.237A5,5,0,0,1,39.238,62H26.252a4.994,4.994,0,0,1-4.923-5.873c1.323-7.372,3.5-20.987,3.656-31.185,3.855.343,7.945.809,12.1,1.433,4.258,10.944,6.515,25.644,7.111,29.946A4.983,4.983,0,0,1,43.013,60.283Zm-3.657-33.55c.648.107,1.3.216,1.944.331l3.278,9.83c-.737.043-1.439.072-2.1.088A102.933,102.933,0,0,0,39.356,26.733ZM56,30.545v4.529c-.644.2-1.313.373-2,.534V29.95Q55.008,30.24,56,30.545Zm-4,5.479c-.378.07-.755.135-1.136.2l-1.5-7.488q1.328.318,2.634.665ZM47.228,28.24,48.881,36.5c-.759.094-1.51.174-2.246.239l-3.089-9.266Q45.4,27.832,47.228,28.24ZM58,34.368V31.191c1.133.383,2.235.794,3.319,1.219A11.188,11.188,0,0,1,58,34.368ZM54.939,15.051a42.8,42.8,0,0,1,4.619,8.694,4.994,4.994,0,0,1-4.619-8.694ZM39.586,3.422A27.9,27.9,0,0,1,49.964,9.363,6,6,0,0,1,39.586,3.422Zm-1.945-.537A7.993,7.993,0,0,0,51.417,10.77a33.082,33.082,0,0,1,2.332,2.673,6.99,6.99,0,0,0,6.509,12.174,46.755,46.755,0,0,1,1.393,4.774,118.874,118.874,0,0,0-24.78-6.062,7,7,0,1,0-13.86-1.556c-9.971-.8-18.032-.815-20.9-.788A22.525,22.525,0,0,1,3.723,16.3,7.994,7.994,0,0,0,15,9a7.872,7.872,0,0,0-.906-3.682C18,3.331,23.163,2,30,2A32.564,32.564,0,0,1,37.641,2.885ZM12.348,6.3A5.993,5.993,0,0,1,4.6,14.5,21.6,21.6,0,0,1,12.348,6.3Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M26.918,48.034a1.006,1.006,0,0,0-1.225.707,12.368,12.368,0,0,1-.588,1.812,1,1,0,0,0,1.79.894,12.993,12.993,0,0,0,.73-2.188A1,1,0,0,0,26.918,48.034Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M27.758,30.03a1,1,0,0,0-.728,1.213c.009.038.942,3.887-.02,10.616q-.153,1.065-.3,1.978a1,1,0,0,0,.823,1.15,1.034,1.034,0,0,0,.164.013,1,1,0,0,0,.986-.837c.1-.623.207-1.3.31-2.021,1.016-7.113.023-11.213-.02-11.385A1,1,0,0,0,27.758,30.03Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M33.341,46.92a1,1,0,0,0-1.28.6,11.342,11.342,0,0,1-.918,1.964,1,1,0,1,0,1.714,1.03A13.1,13.1,0,0,0,33.941,48.2,1,1,0,0,0,33.341,46.92Z\" >\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M33.876,36.008a1,1,0,0,0-.868,1.116,29.669,29.669,0,0,1,0,6.032,1,1,0,0,0,.889,1.1.955.955,0,0,0,.106.006,1,1,0,0,0,.993-.9,31.242,31.242,0,0,0,0-6.491A1,1,0,0,0,33.876,36.008Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M37.01,44.142l1,7a1,1,0,1,0,1.98-.284l-1-7a1,1,0,0,0-1.98.284Z\">\n            <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M61,53c0-.964-.123-9.459-4.4-10.978-2.728-.969-6.12,1.109-10.375,6.348a1,1,0,0,0-.119,1.077c.14.278,1.055,1.838,4.146,3.056a33.757,33.757,0,0,1-.8,8.963,1.963,1.963,0,0,0,.327,1.734,2,2,0,0,0,1.605.8h4.6a1.978,1.978,0,0,0,1.434-.609,2.033,2.033,0,0,0,.565-1.478,51.524,51.524,0,0,0-1.064-8.036C57.867,53.95,58.878,54,60,54A1,1,0,0,0,61,53Zm-5.02,9-4.608.015a35.888,35.888,0,0,0,.9-8.865,23.808,23.808,0,0,0,2.557.506A50.855,50.855,0,0,1,55.98,62ZM48.289,49.01c4.389-5.216,6.662-5.449,7.64-5.1,2.171.77,2.885,5.49,3.038,8.081C51.986,51.815,49.219,49.917,48.289,49.01Z\">\n          \n          <animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" values=\"-3, 60, 80;3, 60,80;-3,60,80\" dur=\"3s\" additive=\"sum\" repeatCount=\"indefinite\" />\n          </path>\n        \n        <animate attributeName=\"fill\" values=\"b2b2b2;704cb6;b2b2b2;\" dur=\"8s\" repeatCount=\"indefinite\"/>\n        \n      \n      \n\n        </svg>\n        <Farming/>\n        \n        </div>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux'\n\nimport farmingReducer from '../features/farming_minigame/farmingSlice';\n\nconst currentVersion = '0.1.1'\n\nlet persistedState = localStorage.getItem('reduxState') \n                       ? JSON.parse(localStorage.getItem('reduxState') || '{}')\n                       : {}\nif(persistedState && persistedState.farming && persistedState.farming.version !== currentVersion){\n  persistedState = {}\n}\nif(persistedState && persistedState.gameState && persistedState.gameState.status && persistedState.gameState.status === 'started'){\n   persistedState.gameState.status = 'ready'\n}\nexport const store = configureStore({\n  reducer: {\n    farming: farmingReducer\n  },\n  preloadedState: persistedState\n},);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Farming_row__3F5tY\",\"value\":\"Farming_value__2vtaD\",\"button\":\"Farming_button__3edmD\",\"textbox\":\"Farming_textbox__219dn\",\"asyncButton\":\"Farming_asyncButton__pDz8e Farming_button__3edmD\",\"buttonThermite\":\"Farming_buttonThermite__1ZXsW\",\"greenInactive\":\"Farming_greenInactive__wywNz\",\"blueInactive\":\"Farming_blueInactive__1cpj0\",\"redInactive\":\"Farming_redInactive__AwjGf\",\"goldInactive\":\"Farming_goldInactive__1CYg3\",\"orangeInactive\":\"Farming_orangeInactive__1UU00\",\"greenActive\":\"Farming_greenActive__-odSk\",\"blueActive\":\"Farming_blueActive__32hG-\",\"redActive\":\"Farming_redActive__2R1kz\",\"goldActive\":\"Farming_goldActive__10PlU\",\"orangeActive\":\"Farming_orangeActive__3uz5U\",\"optimal\":\"Farming_optimal__1UIra\",\"gameText\":\"Farming_gameText__fmDq0\"};"],"sourceRoot":""}